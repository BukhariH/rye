var search_data = {"index":{"searchIndex":["object","rye","box","instanceexechelper","cmd","commandnotfound","err","hop","key","badfile","badperm","noboxes","nohost","nopassword","nopty","notconnected","rap","ryeerror","set","tpl","version","==()","==()",">()",">>()","[]()","[]()","ab()","add_box()","add_boxes()","add_command()","add_env()","add_exit_status()","add_key()","add_key()","add_key()","add_keys()","add_keys()","add_keys()","add_keys()","add_stderr()","add_stdout()","aptitude()","awk()","bash()","batch()","bunzip2()","bzip2()","can()","can?()","can?()","cat()","cd()","cd()","chmod()","chown()","cmd?()","cmds()","code()","colors()","command?()","command_group()","commands()","configure()","connect()","connect()","cp()","curl()","current_umask()","current_working_directory()","cvs()","date()","debug()","debug?()","debug?()","decrypt()","delete()","df()","digest_md5()","digest_sha1()","digest_sha2()","dir()","dir_download()","dir_upload()","directory_download()","directory_upload()","disable_quiet_mode()","disable_safe_mode()","disable_sudo()","disconnect()","disconnect()","dpkg()","dsa?()","du()","dump()","echo()","empty?()","enable_quiet_mode()","enable_safe_mode()","enable_sudo()","encrypt()","encrypted?()","env()","err()","error?()","error?()","escape()","exception_hook()","exception_hook=()","exception_hook=()","execute()","exit_status()","exit_status_check()","fetch_port()","file_append()","file_download()","file_exists?()","file_modify()","file_upload()","file_verified?()","file_write()","find_private_keys()","from_file()","generate_pkey()","getconf()","getenv()","git()","grep()","guess_user_home()","gunzip()","gzip()","hg()","history()","host()","host()","host()","host=()","host=()","host_key()","host_key()","hostname()","hostset()","impltype()","impltype=()","info()","info?()","info?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance_exec()","interactive_ssh()","irb()","keys()","keys()","keys()","keys()","ldconfig()","ln()","ls()","make()","message()","message()","message()","message()","message()","method_missing()","method_missing()","mkdir()","mkfs()","mount()","mutex()","mv()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nickname()","nickname()","nickname=()","nickname=()","opts()","opts()","opts=()","opts=()","ostype()","ostype=()","parallel()","path()","perl()","post_command_hook()","post_command_hook=()","pre_command_hook()","pre_command_hook=()","prepare_command()","prerelease?()","preview_command()","printenv()","private?()","private_key()","ps()","public?()","public_key()","public_key_to_ssh2()","pwd()","python()","quiet()","quietly()","rake()","read_version()","reload()","remote_host_keys()","remove_command()","remove_hops!()","remove_key()","remove_key()","remove_key()","remove_keys()","remove_keys()","remove_keys()","result!()","results()","root?()","root?()","root?()","rsa?()","ruby()","rudy()","rudy_ec2()","rudy_s3()","rudy_sdb()","run()","rye()","safe()","safe?()","safely()","sed()","setenv()","setenv()","setenvironment_variable()","sh()","shell()","siege()","sign()","sign()","sign_aws()","sleep()","ssh_config_options()","ssh_config_options()","sshagent_info()","stash()","stash=()","stderr()","stdout()","stdout()","stdout_hook()","stdout_hook=()","stella()","str_download()","str_upload()","strand()","string_append()","string_download()","string_upload()","strwrap()","su()","sudo()","sudo?()","supported_authentication?()","supported_keytype?()","svn()","switch_user()","switch_user()","sysinfo()","sysinfo()","tail()","tar()","template_upload()","template_write()","templates()","templates?()","test()","to_a()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","touch()","try()","umask=()","umount()","uname()","unsafely()","unxz()","unzip()","uptime()","user()","user()","user()","useradd()","via()","via()","via=()","via?()","via?()","via_hop()","via_hop()","wc()","wget()","which()","which()","whoami()","wildly()","without_indent()","xz()","license","readme","version"],"longSearchIndex":["object","rye","rye::box","rye::box::instanceexechelper","rye::cmd","rye::commandnotfound","rye::err","rye::hop","rye::key","rye::key::badfile","rye::key::badperm","rye::noboxes","rye::nohost","rye::nopassword","rye::nopty","rye::notconnected","rye::rap","rye::ryeerror","rye::set","rye::tpl","rye::version","rye::box#==()","rye::hop#==()","rye::rap#>()","rye::rap#>>()","rye::box#[]()","rye::set#[]()","rye::cmd#ab()","rye::set#add_box()","rye::set#add_boxes()","rye::cmd::add_command()","rye::box#add_env()","rye::rap#add_exit_status()","rye::box#add_key()","rye::hop#add_key()","rye::set#add_key()","rye#add_keys()","rye::box#add_keys()","rye::hop#add_keys()","rye::set#add_keys()","rye::rap#add_stderr()","rye::rap#add_stdout()","rye::cmd#aptitude()","rye::cmd#awk()","rye::cmd#bash()","rye::box#batch()","rye::cmd#bunzip2()","rye::cmd#bzip2()","rye::cmd#can()","rye::cmd::can?()","rye::cmd#can?()","rye::cmd#cat()","rye::box#cd()","rye::set#cd()","rye::cmd#chmod()","rye::cmd#chown()","rye::cmd#cmd?()","rye::cmd#cmds()","rye::rap#code()","object#colors()","rye::cmd#command?()","object#command_group()","rye::cmd#commands()","rye::cmd#configure()","rye::box#connect()","rye::hop#connect()","rye::cmd#cp()","rye::cmd#curl()","rye::box#current_umask()","rye::box#current_working_directory()","rye::cmd#cvs()","rye::cmd#date()","object#debug()","rye::box#debug?()","rye::hop#debug?()","rye::key#decrypt()","rye::tpl#delete()","rye::cmd#df()","rye::cmd#digest_md5()","rye::cmd#digest_sha1()","rye::cmd#digest_sha2()","rye::cmd#dir()","rye::cmd#dir_download()","rye::cmd#dir_upload()","rye::cmd#directory_download()","rye::cmd#directory_upload()","rye::box#disable_quiet_mode()","rye::box#disable_safe_mode()","rye::box#disable_sudo()","rye::box#disconnect()","rye::hop#disconnect()","rye::cmd#dpkg()","rye::key#dsa?()","rye::cmd#du()","rye::key#dump()","rye::cmd#echo()","rye::set#empty?()","rye::box#enable_quiet_mode()","rye::box#enable_safe_mode()","rye::box#enable_sudo()","rye::key#encrypt()","rye::key#encrypted?()","rye::cmd#env()","object#err()","rye::box#error?()","rye::hop#error?()","rye#escape()","rye::box#exception_hook()","rye::box#exception_hook=()","rye::hop#exception_hook=()","rye::box#execute()","rye::err#exit_status()","object#exit_status_check()","rye::hop#fetch_port()","rye::cmd#file_append()","rye::cmd#file_download()","rye::cmd#file_exists?()","rye::cmd#file_modify()","rye::cmd#file_upload()","rye::cmd#file_verified?()","rye::cmd#file_write()","rye#find_private_keys()","rye::key::from_file()","rye::key::generate_pkey()","rye::cmd#getconf()","rye::box#getenv()","rye::cmd#git()","rye::cmd#grep()","rye::box#guess_user_home()","rye::cmd#gunzip()","rye::cmd#gzip()","rye::cmd#hg()","rye::cmd#history()","object#host()","rye::box#host()","rye::hop#host()","rye::box#host=()","rye::hop#host=()","rye::box#host_key()","rye::hop#host_key()","rye::cmd#hostname()","object#hostset()","rye::box#impltype()","rye::box#impltype=()","object#info()","rye::box#info?()","rye::hop#info?()","rye::box#inspect()","rye::hop#inspect()","rye::key#inspect()","rye::rap#inspect()","rye::set#inspect()","rye::version::inspect()","rye::box#instance_exec()","rye::box#interactive_ssh()","rye::cmd#irb()","rye#keys()","rye::box#keys()","rye::hop#keys()","rye::set#keys()","rye::cmd#ldconfig()","rye::cmd#ln()","rye::cmd#ls()","rye::cmd#make()","rye::err#message()","rye::key::badfile#message()","rye::key::badperm#message()","rye::nopassword#message()","rye::nopty#message()","rye::box#method_missing()","rye::set#method_missing()","rye::cmd#mkdir()","rye::cmd#mkfs()","rye::cmd#mount()","rye#mutex()","rye::cmd#mv()","rye::box::new()","rye::err::new()","rye::hop::new()","rye::key::new()","rye::key::badfile::new()","rye::key::badperm::new()","rye::rap::new()","rye::set::new()","rye::tpl::new()","rye::box#nickname()","rye::hop#nickname()","rye::box#nickname=()","rye::hop#nickname=()","rye::box#opts()","rye::hop#opts()","rye::box#opts=()","rye::hop#opts=()","rye::box#ostype()","rye::box#ostype=()","object#parallel()","rye::tpl#path()","rye::cmd#perl()","rye::box#post_command_hook()","rye::box#post_command_hook=()","rye::box#pre_command_hook()","rye::box#pre_command_hook=()","rye#prepare_command()","rye::version::prerelease?()","rye::box#preview_command()","rye::cmd#printenv()","rye::key#private?()","rye::key#private_key()","rye::cmd#ps()","rye::key#public?()","rye::key#public_key()","rye::key::public_key_to_ssh2()","rye::cmd#pwd()","rye::cmd#python()","rye::box#quiet()","rye::box#quietly()","rye::cmd#rake()","rye::version::read_version()","rye#reload()","rye#remote_host_keys()","rye::cmd::remove_command()","rye::hop#remove_hops!()","rye::box#remove_key()","rye::hop#remove_key()","rye::set#remove_key()","rye::box#remove_keys()","rye::hop#remove_keys()","rye::set#remove_keys()","rye::tpl#result!()","object#results()","rye::box#root?()","rye::hop#root?()","rye::set#root?()","rye::key#rsa?()","rye::cmd#ruby()","rye::cmd#rudy()","rye::cmd#rudy_ec2()","rye::cmd#rudy_s3()","rye::cmd#rudy_sdb()","rye::set#run()","rye::cmd#rye()","rye::box#safe()","rye::box#safe?()","rye::box#safely()","rye::cmd#sed()","rye::box#setenv()","rye::set#setenv()","rye::set#setenvironment_variable()","rye::cmd#sh()","rye#shell()","rye::cmd#siege()","rye::key::sign()","rye::key#sign()","rye::key::sign_aws()","rye::cmd#sleep()","rye::box#ssh_config_options()","rye::hop#ssh_config_options()","rye#sshagent_info()","rye::box#stash()","rye::box#stash=()","rye::err#stderr()","rye::err#stdout()","rye::rap#stdout()","rye::box#stdout_hook()","rye::box#stdout_hook=()","rye::cmd#stella()","rye::cmd#str_download()","rye::cmd#str_upload()","rye#strand()","rye::cmd#string_append()","rye::cmd#string_download()","rye::cmd#string_upload()","object#strwrap()","rye::cmd#su()","rye::box#sudo()","rye::box#sudo?()","rye::key::supported_authentication?()","rye::key::supported_keytype?()","rye::cmd#svn()","rye::box#switch_user()","rye::hop#switch_user()","rye::sysinfo()","rye#sysinfo()","rye::cmd#tail()","rye::cmd#tar()","rye::cmd#template_upload()","rye::cmd#template_write()","rye::box#templates()","rye::box#templates?()","rye::cmd#test()","rye::version::to_a()","rye::box#to_s()","rye::hop#to_s()","rye::key#to_s()","rye::rap#to_s()","rye::set#to_s()","rye::tpl#to_s()","rye::version::to_s()","rye::cmd#touch()","rye::cmd#try()","rye::box#umask=()","rye::cmd#umount()","rye::cmd#uname()","rye::box#unsafely()","rye::cmd#unxz()","rye::cmd#unzip()","rye::cmd#uptime()","rye::box#user()","rye::hop#user()","rye::set#user()","rye::cmd#useradd()","rye::box#via()","rye::hop#via()","rye::box#via=()","rye::box#via?()","rye::hop#via?()","rye::box#via_hop()","rye::hop#via_hop()","rye::cmd#wc()","rye::cmd#wget()","rye#which()","rye::cmd#which()","rye::cmd#whoami()","rye::box#wildly()","rye#without_indent()","rye::cmd#xz()","","",""],"info":[["Object","","Object.html","",""],["Rye","","Rye.html","","<p>vim: set sw=2 ts=2 :\n<p>vim: set sw=2 ts=2 :\n<p>vim: set sw=2 ts=2 :\n"],["Rye::Box","","Rye/Box.html","","<p>Rye::Box\n<p>The Rye::Box class represents a machine. All system commands are made\nthrough this class.\n\n<pre>rbox ...</pre>\n"],["Rye::Box::InstanceExecHelper","","Rye/Box/InstanceExecHelper.html","",""],["Rye::Cmd","","Rye/Cmd.html","","<p>Rye::Cmd\n<p>This class contains all of the shell command methods available to an\ninstance of Rye::Box. For ...\n"],["Rye::CommandNotFound","","Rye/CommandNotFound.html","",""],["Rye::Err","","Rye/Err.html","",""],["Rye::Hop","","Rye/Hop.html","","<p>Rye::Hop\n<p>The Rye::Hop class represents a machine.  This class allows boxes to by\naccessed via it.\n\n<pre>rhop ...</pre>\n"],["Rye::Key","","Rye/Key.html","",""],["Rye::Key::BadFile","","Rye/Key/BadFile.html","",""],["Rye::Key::BadPerm","","Rye/Key/BadPerm.html","",""],["Rye::NoBoxes","","Rye/NoBoxes.html","",""],["Rye::NoHost","","Rye/NoHost.html","",""],["Rye::NoPassword","","Rye/NoPassword.html","",""],["Rye::NoPty","","Rye/NoPty.html","",""],["Rye::NotConnected","","Rye/NotConnected.html","",""],["Rye::Rap","","Rye/Rap.html","","<p>Rye::Rap\n<p>This class is a modified Array which is returned by all command methods.\nThe command output is ...\n"],["Rye::RyeError","","Rye/RyeError.html","",""],["Rye::Set","","Rye/Set.html","","<p>Rye::Set\n"],["Rye::Tpl","","Rye/Tpl.html","",""],["Rye::VERSION","","Rye/VERSION.html","",""],["==","Rye::Box","Rye/Box.html#method-i-3D-3D","(other)","<p>Compares itself with the <code>other</code> box. If the hostnames are the\nsame, this will return true. Otherwise false. ...\n"],["==","Rye::Hop","Rye/Hop.html#method-i-3D-3D","(other)","<p>Compares itself with the <code>other</code> box. If the hostnames are the\nsame, this will return true. Otherwise false. ...\n"],[">","Rye::Rap","Rye/Rap.html#method-i-3E","(path)","<p>Output STDOUT content to (remote) <code>path</code>  This works like a\nshell redirect so the file contents are  cleared ...\n"],[">>","Rye::Rap","Rye/Rap.html#method-i-3E-3E","(path)","<p>Output STDOUT content to (remote) <code>path</code>  This works like a\nshell redirect so if the target file exists ...\n"],["[]","Rye::Box","Rye/Box.html#method-i-5B-5D","(fpath=nil)","<p>Change the current working directory (sort of).\n<p>I haven't been able to wrangle Net::SSH to do my bidding. ...\n"],["[]","Rye::Set","Rye/Set.html#method-i-5B-5D","(key=nil)","<p>See Rye::Box.[]\n"],["ab","Rye::Cmd","Rye/Cmd.html#method-i-ab","(*args)",""],["add_box","Rye::Set","Rye/Set.html#method-i-add_box","(*boxes)","<p><code>boxes</code> one or more boxes. Rye::Box objects will be added\ndirectly\n\n<p>to the set. Hostnames will be used to ...\n"],["add_boxes","Rye::Set","Rye/Set.html#method-i-add_boxes","(*boxes)",""],["add_command","Rye::Cmd","Rye/Cmd.html#method-c-add_command","(meth, path=nil, *hard_args, &block)","<p>A helper for adding a command to Rye::Cmd.\n<p><code>meth</code> the method name\n<p><code>path</code> (optional) filesystem path for the ...\n"],["add_env","Rye::Box","Rye/Box.html#method-i-add_env","(n, v)",""],["add_exit_status","Rye::Rap","Rye/Rap.html#method-i-add_exit_status","(code)","<p>Parse the exit code.\n<p><code>code</code> an exit code string or integer or Process::Status object\n\n<p>For example, when running ...\n"],["add_key","Rye::Box","Rye/Box.html#method-i-add_key","(*keys)",""],["add_key","Rye::Hop","Rye/Hop.html#method-i-add_key","(*keys)",""],["add_key","Rye::Set","Rye/Set.html#method-i-add_key","(*additional_keys)",""],["add_keys","Rye","Rye.html#method-i-add_keys","(*keys)","<p>Add one or more private keys to the SSH Agent.\n<p><code>keys</code> one or more file paths to private keys used for\npasswordless ...\n\n"],["add_keys","Rye::Box","Rye/Box.html#method-i-add_keys","(*keys)","<p>Add one or more private keys to the list of key paths.\n<p><code>keys</code> is a list of file paths to private keys\n\n<p>Returns ...\n"],["add_keys","Rye::Hop","Rye/Hop.html#method-i-add_keys","(*keys)","<p>Add one or more private keys to the list of key paths.\n<p><code>keys</code> is a list of file paths to private keys\n\n<p>Returns ...\n"],["add_keys","Rye::Set","Rye/Set.html#method-i-add_keys","(*additional_keys)","<p>Add one or more private keys to each box. Also stores key paths in the set\nso when new boxes are added ...\n"],["add_stderr","Rye::Rap","Rye/Rap.html#method-i-add_stderr","(*args)","<p>Add STDERR output from the command executed via SSH.\n"],["add_stdout","Rye::Rap","Rye/Rap.html#method-i-add_stdout","(*args)","<p>Add STDOUT output from the command executed via SSH.  This is available to\nmaintain consistency with ...\n"],["aptitude","Rye::Cmd","Rye/Cmd.html#method-i-aptitude","(*args)",""],["awk","Rye::Cmd","Rye/Cmd.html#method-i-awk","(*args)",""],["bash","Rye::Cmd","Rye/Cmd.html#method-i-bash","(*args, &blk)","<p>When called without a block this will open an  interactive shell session.\n"],["batch","Rye::Box","Rye/Box.html#method-i-batch","(*args, &block)","<p>Execute a block in the context of an instance of Rye::Box.\n\n<pre>rbox = Rye::Box.new\n\nrbox.batch do\n  ls :l ...</pre>\n"],["bunzip2","Rye::Cmd","Rye/Cmd.html#method-i-bunzip2","(*args)",""],["bzip2","Rye::Cmd","Rye/Cmd.html#method-i-bzip2","(*args)",""],["can","Rye::Cmd","Rye/Cmd.html#method-i-can","()","<p>Returns an Array of system commands available over SSH\n"],["can?","Rye::Cmd","Rye/Cmd.html#method-c-can-3F","(meth)",""],["can?","Rye::Cmd","Rye/Cmd.html#method-i-can-3F","(meth)",""],["cat","Rye::Cmd","Rye/Cmd.html#method-i-cat","(*args)",""],["cd","Rye::Box","Rye/Box.html#method-i-cd","(fpath=nil)","<p>Like [] except it returns an empty Rye::Rap object to mimick a regular\ncommand method. Call with nil ...\n"],["cd","Rye::Set","Rye/Set.html#method-i-cd","(key=nil)","<p>alias :cd :'[]'  # fix for jruby\n"],["chmod","Rye::Cmd","Rye/Cmd.html#method-i-chmod","(*args)",""],["chown","Rye::Cmd","Rye/Cmd.html#method-i-chown","(*args)",""],["cmd?","Rye::Cmd","Rye/Cmd.html#method-i-cmd-3F","(meth)",""],["cmds","Rye::Cmd","Rye/Cmd.html#method-i-cmds","()",""],["code","Rye::Rap","Rye/Rap.html#method-i-code","()",""],["colors","Object","Object.html#method-i-colors","(state;)",""],["command?","Rye::Cmd","Rye/Cmd.html#method-i-command-3F","(meth)",""],["command_group","Object","Object.html#method-i-command_group","(name, &block)",""],["commands","Rye::Cmd","Rye/Cmd.html#method-i-commands","()",""],["configure","Rye::Cmd","Rye/Cmd.html#method-i-configure","(*args)",""],["connect","Rye::Box","Rye/Box.html#method-i-connect","(reconnect=true)","<p>Open an SSH session with +@rye_host+. This called automatically when you\nthe first comamnd is run if ...\n"],["connect","Rye::Hop","Rye/Hop.html#method-i-connect","(reconnect=true)","<p>Open an SSH session with +@rye_host+. This called automatically when you\nthe first comamnd is run if ...\n"],["cp","Rye::Cmd","Rye/Cmd.html#method-i-cp","(*args)",""],["curl","Rye::Cmd","Rye/Cmd.html#method-i-curl","(*args)",""],["current_umask","Rye::Box","Rye/Box.html#method-i-current_umask","()","<p>The most recent valud for umask (or 0022)\n"],["current_working_directory","Rye::Box","Rye/Box.html#method-i-current_working_directory","()","<p>The most recent value from Box.cd or Box.[]\n"],["cvs","Rye::Cmd","Rye/Cmd.html#method-i-cvs","(*args)",""],["date","Rye::Cmd","Rye/Cmd.html#method-i-date","(*args)",""],["debug","Object","Object.html#method-i-debug","(msg, *opts)",""],["debug?","Rye::Box","Rye/Box.html#method-i-debug-3F","()",""],["debug?","Rye::Hop","Rye/Hop.html#method-i-debug-3F","()",""],["decrypt","Rye::Key","Rye/Key.html#method-i-decrypt","(text)",""],["delete","Rye::Tpl","Rye/Tpl.html#method-i-delete","()",""],["df","Rye::Cmd","Rye/Cmd.html#method-i-df","(*args)",""],["digest_md5","Rye::Cmd","Rye/Cmd.html#method-i-digest_md5","(*files)","<p><code>files</code> An Array of file paths\n\n<p>Returns an Array of MD5 digests for each of the given files\n"],["digest_sha1","Rye::Cmd","Rye/Cmd.html#method-i-digest_sha1","(*files)","<p><code>files</code> An Array of file paths\n\n<p>Returns an Array of SH1 digests for each of the given files\n"],["digest_sha2","Rye::Cmd","Rye/Cmd.html#method-i-digest_sha2","(*files)","<p><code>files</code> An Array of file paths\n\n<p>Returns an Array of SH2 digests for each of the given files\n"],["dir","Rye::Cmd","Rye/Cmd.html#method-i-dir","(*args)",""],["dir_download","Rye::Cmd","Rye/Cmd.html#method-i-dir_download","(*paths)","<p>Same as file_download except directories are processed recursively. If any\nsupplied paths are directories ...\n"],["dir_upload","Rye::Cmd","Rye/Cmd.html#method-i-dir_upload","(*paths)","<p>Same as file_upload except directories are processed recursively. If any\nsupplied paths are directories ...\n"],["directory_download","Rye::Cmd","Rye/Cmd.html#method-i-directory_download","(*paths)",""],["directory_upload","Rye::Cmd","Rye/Cmd.html#method-i-directory_upload","(*paths)",""],["disable_quiet_mode","Rye::Box","Rye/Box.html#method-i-disable_quiet_mode","()",""],["disable_safe_mode","Rye::Box","Rye/Box.html#method-i-disable_safe_mode","()",""],["disable_sudo","Rye::Box","Rye/Box.html#method-i-disable_sudo","()",""],["disconnect","Rye::Box","Rye/Box.html#method-i-disconnect","()","<p>Close the SSH session  with +@rye_host+. This is called  automatically at\nexit if the connection is open. ...\n"],["disconnect","Rye::Hop","Rye/Hop.html#method-i-disconnect","()","<p>Close the SSH session  with +@rye_host+. This is called  automatically at\nexit if the connection is open. ...\n"],["dpkg","Rye::Cmd","Rye/Cmd.html#method-i-dpkg","(*args)",""],["dsa?","Rye::Key","Rye/Key.html#method-i-dsa-3F","()",""],["du","Rye::Cmd","Rye/Cmd.html#method-i-du","(*args)",""],["dump","Rye::Key","Rye/Key.html#method-i-dump","()",""],["echo","Rye::Cmd","Rye/Cmd.html#method-i-echo","(*args)",""],["empty?","Rye::Set","Rye/Set.html#method-i-empty-3F","()","<p>Are there any boxes in this set?\n"],["enable_quiet_mode","Rye::Box","Rye/Box.html#method-i-enable_quiet_mode","()",""],["enable_safe_mode","Rye::Box","Rye/Box.html#method-i-enable_safe_mode","()",""],["enable_sudo","Rye::Box","Rye/Box.html#method-i-enable_sudo","()",""],["encrypt","Rye::Key","Rye/Key.html#method-i-encrypt","(text)","<p>Encrypt <code>text</code> with this public or private key. The key must\n"],["encrypted?","Rye::Key","Rye/Key.html#method-i-encrypted-3F","()",""],["env","Rye::Cmd","Rye/Cmd.html#method-i-env","()",""],["err","Object","Object.html#method-i-err","(msg, *opts)",""],["error?","Rye::Box","Rye/Box.html#method-i-error-3F","()",""],["error?","Rye::Hop","Rye/Hop.html#method-i-error-3F","()",""],["escape","Rye","Rye.html#method-i-escape","(safe, cmd, *args)","<p>Creates a string from <code>cmd</code> and <code>args</code>. If\n<code>safe</code> is true it will send them through Escape.shell_command\notherwise ...\n"],["exception_hook","Rye::Box","Rye/Box.html#method-i-exception_hook","(klass, &block)","<p>Supply a block to be called whenever there's an Exception. It's called with\n1 argument: the exception ...\n"],["exception_hook=","Rye::Box","Rye/Box.html#method-i-exception_hook-3D","(val)","<p>A Hash. The keys are exception classes, the values are Procs to execute\n"],["exception_hook=","Rye::Hop","Rye/Hop.html#method-i-exception_hook-3D","(val)","<p>A Hash. The keys are exception classes, the values are Procs to execute\n"],["execute","Rye::Box","Rye/Box.html#method-i-execute","(cmd, *args, &block)",""],["exit_status","Rye::Err","Rye/Err.html#method-i-exit_status","()",""],["exit_status_check","Object","Object.html#method-i-exit_status_check","(cmd, opts={})",""],["fetch_port","Rye::Hop","Rye/Hop.html#method-i-fetch_port","(host, port = 22, localport = nil)","<p>instance method, that will setup a forward, and return the port used\n"],["file_append","Rye::Cmd","Rye/Cmd.html#method-i-file_append","(filepath, newcontent, backup=false)","<p>Append <code>newcontent</code> to remote <code>filepath</code>. If the file\ndoesn't exist it will be created. If <code>backup</code> is specified, ...\n"],["file_download","Rye::Cmd","Rye/Cmd.html#method-i-file_download","(*paths)","<p>Transfer files from a machine via Net::SCP.\n<p><code>paths</code> is an Array of files to download. The last element ...\n\n"],["file_exists?","Rye::Cmd","Rye/Cmd.html#method-i-file_exists-3F","(path)","<p>Does <code>path</code> from the current working directory?\n"],["file_modify","Rye::Cmd","Rye/Cmd.html#method-i-file_modify","(filepath, regexp, replace=nil)",""],["file_upload","Rye::Cmd","Rye/Cmd.html#method-i-file_upload","(*paths)","<p>Transfer files to a machine via Net::SCP.\n<p><code>paths</code> is an Array of files to upload. The last element is the\n...\n\n"],["file_verified?","Rye::Cmd","Rye/Cmd.html#method-i-file_verified-3F","(path, expected_digest, digest_type=:md5)","<p>Does the calculated digest of <code>path</code> match the known\n<code>expected_digest</code>? This is useful for verifying downloaded ...\n"],["file_write","Rye::Cmd","Rye/Cmd.html#method-i-file_write","(filepath, newcontent, backup=false)","<p>Write <code>newcontent</code> to remote <code>filepath</code>. If the file\nexists it will be overwritten. If <code>backup</code> is specified, ...\n"],["find_private_keys","Rye","Rye.html#method-i-find_private_keys","(path)","<p>Looks for private keys in <code>path</code> and returns an Array of paths\nto the files it finds. Raises an Exception ...\n"],["from_file","Rye::Key","Rye/Key.html#method-c-from_file","(path)",""],["generate_pkey","Rye::Key","Rye/Key.html#method-c-generate_pkey","(authtype=\"RSA\", bits=1024)",""],["getconf","Rye::Cmd","Rye/Cmd.html#method-i-getconf","(*args)",""],["getenv","Rye::Box","Rye/Box.html#method-i-getenv","(key=nil)","<p>Returns the hash containing the parsed output of \"env\" on the  remote\nmachine. If the initialize ...\n"],["git","Rye::Cmd","Rye/Cmd.html#method-i-git","(*args)",""],["grep","Rye::Cmd","Rye/Cmd.html#method-i-grep","(*args)",""],["guess_user_home","Rye::Box","Rye/Box.html#method-i-guess_user_home","(other_user=nil)","<p>Uses the output of \"useradd -D\" to determine the default home directory.\nThis returns a GUESS ...\n"],["gunzip","Rye::Cmd","Rye/Cmd.html#method-i-gunzip","(*args)",""],["gzip","Rye::Cmd","Rye/Cmd.html#method-i-gzip","(*args)",""],["hg","Rye::Cmd","Rye/Cmd.html#method-i-hg","(*args)",""],["history","Rye::Cmd","Rye/Cmd.html#method-i-history","(*args)",""],["host","Object","Object.html#method-i-host","(hostname, *args, &block)",""],["host","Rye::Box","Rye/Box.html#method-i-host","()",""],["host","Rye::Hop","Rye/Hop.html#method-i-host","()",""],["host=","Rye::Box","Rye/Box.html#method-i-host-3D","(val)",""],["host=","Rye::Hop","Rye/Hop.html#method-i-host-3D","(val)",""],["host_key","Rye::Box","Rye/Box.html#method-i-host_key","()","<p>Returns the host SSH keys for this box\n"],["host_key","Rye::Hop","Rye/Hop.html#method-i-host_key","()","<p>Returns the host SSH keys for this box\n"],["hostname","Rye::Cmd","Rye/Cmd.html#method-i-hostname","(*args)",""],["hostset","Object","Object.html#method-i-hostset","(setname, *args, &block)",""],["impltype","Rye::Box","Rye/Box.html#method-i-impltype","()",""],["impltype=","Rye::Box","Rye/Box.html#method-i-impltype-3D","(val)",""],["info","Object","Object.html#method-i-info","(msg, *opts)",""],["info?","Rye::Box","Rye/Box.html#method-i-info-3F","()",""],["info?","Rye::Hop","Rye/Hop.html#method-i-info-3F","()",""],["inspect","Rye::Box","Rye/Box.html#method-i-inspect","()",""],["inspect","Rye::Hop","Rye/Hop.html#method-i-inspect","()",""],["inspect","Rye::Key","Rye/Key.html#method-i-inspect","()","<p>Reveals some metadata about the key. Does not print the key.\n\n<pre>&lt;Rye::Key:id_rsa.pub authtype=&quot;RSA&quot; keytype=&quot;PRIVATE&quot;&gt;</pre>\n"],["inspect","Rye::Rap","Rye/Rap.html#method-i-inspect","()",""],["inspect","Rye::Set","Rye/Set.html#method-i-inspect","()",""],["inspect","Rye::VERSION","Rye/VERSION.html#method-c-inspect","()",""],["instance_exec","Rye::Box","Rye/Box.html#method-i-instance_exec","(*args, &block)",""],["interactive_ssh","Rye::Box","Rye/Box.html#method-i-interactive_ssh","(run=true)","<p>If STDIN.tty? is true (i.e. if we're connected to a terminal with a human\nat the helm), this will open ...\n"],["irb","Rye::Cmd","Rye/Cmd.html#method-i-irb","(*args, &blk)","<p>When called without a block this will open an  interactive shell session.\n"],["keys","Rye","Rye.html#method-i-keys","()","<p>Returns an Array of info about the currently available SSH keys, as\nprovided by the SSH Agent.\n<p>Returns: ...\n"],["keys","Rye::Box","Rye/Box.html#method-i-keys","()","<p>See Rye.keys\n"],["keys","Rye::Hop","Rye/Hop.html#method-i-keys","()","<p>See Rye.keys\n"],["keys","Rye::Set","Rye/Set.html#method-i-keys","()","<p>See Rye.keys\n"],["ldconfig","Rye::Cmd","Rye/Cmd.html#method-i-ldconfig","(*args)",""],["ln","Rye::Cmd","Rye/Cmd.html#method-i-ln","(*args)",""],["ls","Rye::Cmd","Rye/Cmd.html#method-i-ls","(*args)",""],["make","Rye::Cmd","Rye/Cmd.html#method-i-make","(*args)",""],["message","Rye::Err","Rye/Err.html#method-i-message","()",""],["message","Rye::Key::BadFile","Rye/Key/BadFile.html#method-i-message","()",""],["message","Rye::Key::BadPerm","Rye/Key/BadPerm.html#method-i-message","()",""],["message","Rye::NoPassword","Rye/NoPassword.html#method-i-message","()",""],["message","Rye::NoPty","Rye/NoPty.html#method-i-message","()",""],["method_missing","Rye::Box","Rye/Box.html#method-i-method_missing","(cmd, *args, &block)","<p>A handler for undefined commands.  Raises Rye::CommandNotFound exception.\n"],["method_missing","Rye::Set","Rye/Set.html#method-i-method_missing","(meth, *args, &block)","<p>Catches calls to Rye::Box commands. If <code>meth</code> is the name of an\ninstance method defined in Rye::Cmd then ...\n"],["mkdir","Rye::Cmd","Rye/Cmd.html#method-i-mkdir","(*args)",""],["mkfs","Rye::Cmd","Rye/Cmd.html#method-i-mkfs","(*args)",""],["mount","Rye::Cmd","Rye/Cmd.html#method-i-mount","(*args)",""],["mutex","Rye","Rye.html#method-i-mutex","()",""],["mv","Rye::Cmd","Rye/Cmd.html#method-i-mv","(*args)",""],["new","Rye::Box","Rye/Box.html#method-c-new","(host='localhost', opts={})","<p><code>host</code> The hostname to connect to. Default: localhost.\n<p><code>user</code> The username to connect as. Default: SSH config ...\n"],["new","Rye::Err","Rye/Err.html#method-c-new","(rap)","<p><code>rap</code> a Rye::Rap object\n\n"],["new","Rye::Hop","Rye/Hop.html#method-c-new","(host, opts={})","<p><code>host</code> The hostname to connect to. Default: localhost.\n<p><code>user</code> The username to connect as. Default: SSH config ...\n"],["new","Rye::Key","Rye/Key.html#method-c-new","(data, name=nil)",""],["new","Rye::Key::BadFile","Rye/Key/BadFile.html#method-c-new","(m)",""],["new","Rye::Key::BadPerm","Rye/Key/BadPerm.html#method-c-new","(m)",""],["new","Rye::Rap","Rye/Rap.html#method-c-new","(obj, *args)","<p><code>obj</code> an instance of Rye::Box or Rye::Set\n<p><code>args</code> anything that can sent to Array#new\n\n"],["new","Rye::Set","Rye/Set.html#method-c-new","(name='default', opts={})","<p><code>name</code> The name of the set of machines\n<p><code>opts</code> a hash of optional arguments\n\n<p>The <code>opts</code> hash is used as defaults ...\n"],["new","Rye::Tpl","Rye/Tpl.html#method-c-new","(src, basename='rye-template')",""],["nickname","Rye::Box","Rye/Box.html#method-i-nickname","()",""],["nickname","Rye::Hop","Rye/Hop.html#method-i-nickname","()",""],["nickname=","Rye::Box","Rye/Box.html#method-i-nickname-3D","(val)",""],["nickname=","Rye::Hop","Rye/Hop.html#method-i-nickname-3D","(val)",""],["opts","Rye::Box","Rye/Box.html#method-i-opts","()",""],["opts","Rye::Hop","Rye/Hop.html#method-i-opts","()",""],["opts=","Rye::Box","Rye/Box.html#method-i-opts-3D","(val)",""],["opts=","Rye::Hop","Rye/Hop.html#method-i-opts-3D","(val)",""],["ostype","Rye::Box","Rye/Box.html#method-i-ostype","()","<p>Return the value of uname in lowercase This is a temporary fix. We can use\nSysInfo for this, upload it, ...\n"],["ostype=","Rye::Box","Rye/Box.html#method-i-ostype-3D","(val)",""],["parallel","Object","Object.html#method-i-parallel","(state;)",""],["path","Rye::Tpl","Rye/Tpl.html#method-i-path","()",""],["perl","Rye::Cmd","Rye/Cmd.html#method-i-perl","(*args)",""],["post_command_hook","Rye::Box","Rye/Box.html#method-i-post_command_hook","(&block)","<p>Supply a block to be called after every command. It's called with one\nargument: an instance of Rye::Rap ...\n"],["post_command_hook=","Rye::Box","Rye/Box.html#method-i-post_command_hook-3D","(val)",""],["pre_command_hook","Rye::Box","Rye/Box.html#method-i-pre_command_hook","(&block)","<p>Supply a block to be called before every command. It's called with three\narguments: command name, an ...\n"],["pre_command_hook=","Rye::Box","Rye/Box.html#method-i-pre_command_hook-3D","(val)",""],["prepare_command","Rye","Rye.html#method-i-prepare_command","(cmd, *args)","<p>Takes a command with arguments and returns it in a single String with\nescaped args and some other stuff. ...\n"],["prerelease?","Rye::VERSION","Rye/VERSION.html#method-c-prerelease-3F","()",""],["preview_command","Rye::Box","Rye/Box.html#method-i-preview_command","(*args)","<p>Returns the command an arguments as a String.\n"],["printenv","Rye::Cmd","Rye/Cmd.html#method-i-printenv","(*args)",""],["private?","Rye::Key","Rye/Key.html#method-i-private-3F","()",""],["private_key","Rye::Key","Rye/Key.html#method-i-private_key","()",""],["ps","Rye::Cmd","Rye/Cmd.html#method-i-ps","(*args)",""],["public?","Rye::Key","Rye/Key.html#method-i-public-3F","()",""],["public_key","Rye::Key","Rye/Key.html#method-i-public_key","()",""],["public_key_to_ssh2","Rye::Key","Rye/Key.html#method-c-public_key_to_ssh2","(pubkey)","<p><code>pubkey</code> an instance of OpenSSL::PKey::RSA or OpenSSL::PKey::DSA\n\n<p>Returns a public key in SSH format (suitable ...\n"],["pwd","Rye::Cmd","Rye/Cmd.html#method-i-pwd","(*args)",""],["python","Rye::Cmd","Rye/Cmd.html#method-i-python","(*args)",""],["quiet","Rye::Box","Rye/Box.html#method-i-quiet","()",""],["quietly","Rye::Box","Rye/Box.html#method-i-quietly","(*args, &block)","<p>Like batch, except it enables quiet mode before executing the block.  After\nexecuting the block, quiet ...\n"],["rake","Rye::Cmd","Rye/Cmd.html#method-i-rake","(*args)","<p>def kill(*args) run_command('kill', args) end\n"],["read_version","Rye::VERSION","Rye/VERSION.html#method-c-read_version","()",""],["reload","Rye","Rye.html#method-i-reload","()","<p>Reload Rye dynamically. Useful with irb. NOTE: does not reload rye.rb.\n"],["remote_host_keys","Rye","Rye.html#method-i-remote_host_keys","(*hostnames)",""],["remove_command","Rye::Cmd","Rye/Cmd.html#method-c-remove_command","(meth)","<p>A helper for removing a command from Rye::Cmd.\n<p><code>meth</code> the method name\n\n"],["remove_hops!","Rye::Hop","Rye/Hop.html#method-i-remove_hops-21","()","<p>Cancel the port forward on all active local forwards\n"],["remove_key","Rye::Box","Rye/Box.html#method-i-remove_key","(*keys)",""],["remove_key","Rye::Hop","Rye/Hop.html#method-i-remove_key","(*keys)",""],["remove_key","Rye::Set","Rye/Set.html#method-i-remove_key","(*keys)",""],["remove_keys","Rye::Box","Rye/Box.html#method-i-remove_keys","(*keys)","<p>Remove one or more private keys fromt he list of key paths.\n<p><code>keys</code> is a list of file paths to private keys ...\n\n"],["remove_keys","Rye::Hop","Rye/Hop.html#method-i-remove_keys","(*keys)","<p>Remove one or more private keys fromt he list of key paths.\n<p><code>keys</code> is a list of file paths to private keys ...\n\n"],["remove_keys","Rye::Set","Rye/Set.html#method-i-remove_keys","(*keys)",""],["result!","Rye::Tpl","Rye/Tpl.html#method-i-result-21","(binding)",""],["results","Object","Object.html#method-i-results","(obj, out)",""],["root?","Rye::Box","Rye/Box.html#method-i-root-3F","()",""],["root?","Rye::Hop","Rye/Hop.html#method-i-root-3F","()",""],["root?","Rye::Set","Rye/Set.html#method-i-root-3F","()",""],["rsa?","Rye::Key","Rye/Key.html#method-i-rsa-3F","()",""],["ruby","Rye::Cmd","Rye/Cmd.html#method-i-ruby","(*args)",""],["rudy","Rye::Cmd","Rye/Cmd.html#method-i-rudy","(*args)",""],["rudy_ec2","Rye::Cmd","Rye/Cmd.html#method-i-rudy_ec2","(*args)",""],["rudy_s3","Rye::Cmd","Rye/Cmd.html#method-i-rudy_s3","(*args)",""],["rudy_sdb","Rye::Cmd","Rye/Cmd.html#method-i-rudy_sdb","(*args)",""],["run","Rye::Set","Rye/Set.html#method-i-run","(cmd)",""],["rye","Rye::Cmd","Rye/Cmd.html#method-i-rye","(*args)",""],["safe","Rye::Box","Rye/Box.html#method-i-safe","()",""],["safe?","Rye::Box","Rye/Box.html#method-i-safe-3F","()",""],["safely","Rye::Box","Rye/Box.html#method-i-safely","(*args, &block)","<p>See unsafely (except in reverse)\n"],["sed","Rye::Cmd","Rye/Cmd.html#method-i-sed","(*args)",""],["setenv","Rye::Box","Rye/Box.html#method-i-setenv","(n, v)","<p>Add an environment variable. <code>n</code> and <code>v</code> are the name\nand value. Returns the instance of Rye::Box\n"],["setenv","Rye::Set","Rye/Set.html#method-i-setenv","(n, v)","<p>Add an environment variable. <code>n</code> and <code>v</code> are the name\nand value. Returns the instance of Rye::Set\n"],["setenvironment_variable","Rye::Set","Rye/Set.html#method-i-setenvironment_variable","(n, v)",""],["sh","Rye::Cmd","Rye/Cmd.html#method-i-sh","(*args, &blk)","<p>When called without a block this will open an  interactive shell session.\n"],["shell","Rye","Rye.html#method-i-shell","(cmd, *args)","<p>Execute a local system command (via the shell, not SSH)\n<p><code>cmd</code> the executable path (relative or absolute) ...\n"],["siege","Rye::Cmd","Rye/Cmd.html#method-i-siege","(*args)",""],["sign","Rye::Key","Rye/Key.html#method-c-sign","(secret, string, digesttype=\"sha1\")",""],["sign","Rye::Key","Rye/Key.html#method-i-sign","(string, digesttype=\"sha1\")",""],["sign_aws","Rye::Key","Rye/Key.html#method-c-sign_aws","(secret, string)",""],["sleep","Rye::Cmd","Rye/Cmd.html#method-i-sleep","(*args)",""],["ssh_config_options","Rye::Box","Rye/Box.html#method-i-ssh_config_options","(host)","<p>Parse SSH config files for use with Net::SSH\n"],["ssh_config_options","Rye::Hop","Rye/Hop.html#method-i-ssh_config_options","(host)","<p>Parse SSH config files for use with Net::SSH\n"],["sshagent_info","Rye","Rye.html#method-i-sshagent_info","()",""],["stash","Rye::Box","Rye/Box.html#method-i-stash","()","<p>Returns the current value of the stash +@rye_stash+\n"],["stash=","Rye::Box","Rye/Box.html#method-i-stash-3D","(val)","<p>Store a value to the stash +@rye_stash+\n"],["stderr","Rye::Err","Rye/Err.html#method-i-stderr","()",""],["stdout","Rye::Err","Rye/Err.html#method-i-stdout","()",""],["stdout","Rye::Rap","Rye/Rap.html#method-i-stdout","()","<p>Returns a reference to the Rye::Rap object (which  acts like an Array that\ncontains the STDOUT from the ...\n"],["stdout_hook","Rye::Box","Rye/Box.html#method-i-stdout_hook","(&block)","<p>Supply a block to be called every time a command receives STDOUT data.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rbox</span>.<span class=\"ruby-identifier\">stdout_hook</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">content</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["stdout_hook=","Rye::Box","Rye/Box.html#method-i-stdout_hook-3D","(val)",""],["stella","Rye::Cmd","Rye/Cmd.html#method-i-stella","(*args)",""],["str_download","Rye::Cmd","Rye/Cmd.html#method-i-str_download","(*paths)",""],["str_upload","Rye::Cmd","Rye/Cmd.html#method-i-str_upload","(str, remote_path)",""],["strand","Rye","Rye.html#method-i-strand","( len=8, safe=true )","<p>Generates a string of random alphanumeric characters.\n<p><code>len</code> is the length, an Integer. Default: 8\n<p><code>safe</code> in ...\n"],["string_append","Rye::Cmd","Rye/Cmd.html#method-i-string_append","(filepath, newcontent, backup=false)","<p>Shorthand for +file_append('remote/path', StringIO.new('file content'))+\n<p>Appends the content of the String ...\n"],["string_download","Rye::Cmd","Rye/Cmd.html#method-i-string_download","(*paths)","<p>Shorthand for +file_download('remote/path').string+\n<p>Returns a String containing the content of all remote ...\n"],["string_upload","Rye::Cmd","Rye/Cmd.html#method-i-string_upload","(str, remote_path)","<p>Shorthand for +file_upload(StringIO.new('file content'), 'remote/path')+\n<p>Uploads the content of the String ...\n"],["strwrap","Object","Object.html#method-i-strwrap","(msg, opts={})",""],["su","Rye::Cmd","Rye/Cmd.html#method-i-su","(*args)",""],["sudo","Rye::Box","Rye/Box.html#method-i-sudo","(*args, &block)","<p>Like batch, except it enables sudo mode before executing the block. If the\nuser is already root, this ...\n"],["sudo?","Rye::Box","Rye/Box.html#method-i-sudo-3F","()",""],["supported_authentication?","Rye::Key","Rye/Key.html#method-c-supported_authentication-3F","(val)",""],["supported_keytype?","Rye::Key","Rye/Key.html#method-c-supported_keytype-3F","(val)",""],["svn","Rye::Cmd","Rye/Cmd.html#method-i-svn","(*args)",""],["switch_user","Rye::Box","Rye/Box.html#method-i-switch_user","(newuser)","<p>Reconnect as another user. This is different from su= which executes\nsubsequent commands via +su -c  ...\n"],["switch_user","Rye::Hop","Rye/Hop.html#method-i-switch_user","(newuser)","<p>Reconnect as another user. This is different from su= which executes\nsubsequent commands via +su -c  ...\n"],["sysinfo","Rye","Rye.html#method-c-sysinfo","()","<p>Accessor for an instance of SystemInfo\n"],["sysinfo","Rye","Rye.html#method-i-sysinfo","()","<p>Accessor for an instance of SystemInfo\n"],["tail","Rye::Cmd","Rye/Cmd.html#method-i-tail","(*args)",""],["tar","Rye::Cmd","Rye/Cmd.html#method-i-tar","(*args)",""],["template_upload","Rye::Cmd","Rye/Cmd.html#method-i-template_upload","(*paths)","<p>Parse a template and upload that as a file to remote_path.\n"],["template_write","Rye::Cmd","Rye/Cmd.html#method-i-template_write","(filepath, template)",""],["templates","Rye::Box","Rye/Box.html#method-i-templates","()",""],["templates?","Rye::Box","Rye/Box.html#method-i-templates-3F","()",""],["test","Rye::Cmd","Rye/Cmd.html#method-i-test","(*args)",""],["to_a","Rye::VERSION","Rye/VERSION.html#method-c-to_a","()",""],["to_s","Rye::Box","Rye/Box.html#method-i-to_s","()","<p>Returns +user@rye_host+\n"],["to_s","Rye::Hop","Rye/Hop.html#method-i-to_s","()","<p>Returns +user@rye_host+\n"],["to_s","Rye::Key","Rye/Key.html#method-i-to_s","()","<p>Reveals the key basename. Does not print the key.\n\n<pre>&lt;Rye::Key:id_rsa.pub&gt;</pre>\n"],["to_s","Rye::Rap","Rye/Rap.html#method-i-to_s","()","<p>Returns the first element if there's only the one, an empty String if\nthere's none. Returns the value ...\n"],["to_s","Rye::Set","Rye/Set.html#method-i-to_s","()",""],["to_s","Rye::Tpl","Rye/Tpl.html#method-i-to_s","()",""],["to_s","Rye::VERSION","Rye/VERSION.html#method-c-to_s","()",""],["touch","Rye::Cmd","Rye/Cmd.html#method-i-touch","(*args)",""],["try","Rye::Cmd","Rye/Cmd.html#method-i-try","(*args)",""],["umask=","Rye::Box","Rye/Box.html#method-i-umask-3D","(val='0022')","<p>Change the current umask (sort of -- works the same way as cd) The default\numask is 0022\n"],["umount","Rye::Cmd","Rye/Cmd.html#method-i-umount","(*args)",""],["uname","Rye::Cmd","Rye/Cmd.html#method-i-uname","(*args)",""],["unsafely","Rye::Box","Rye/Box.html#method-i-unsafely","(*args, &block)","<p>Like batch, except it disables safe mode before executing the block.  After\nexecuting the block, safe ...\n"],["unxz","Rye::Cmd","Rye/Cmd.html#method-i-unxz","(*args)",""],["unzip","Rye::Cmd","Rye/Cmd.html#method-i-unzip","(*args)",""],["uptime","Rye::Cmd","Rye/Cmd.html#method-i-uptime","(*args)",""],["user","Rye::Box","Rye/Box.html#method-i-user","()",""],["user","Rye::Hop","Rye/Hop.html#method-i-user","()",""],["user","Rye::Set","Rye/Set.html#method-i-user","()",""],["useradd","Rye::Cmd","Rye/Cmd.html#method-i-useradd","(*args)",""],["via","Rye::Box","Rye/Box.html#method-i-via","()",""],["via","Rye::Hop","Rye/Hop.html#method-i-via","()",""],["via=","Rye::Box","Rye/Box.html#method-i-via-3D","(val)",""],["via?","Rye::Box","Rye/Box.html#method-i-via-3F","()",""],["via?","Rye::Hop","Rye/Hop.html#method-i-via-3F","()",""],["via_hop","Rye::Box","Rye/Box.html#method-i-via_hop","(*args)","<p><code>hops</code> Rye::Hop objects will be added directly\n\n<p>to the set. Hostnames will be used to create new instances ...\n"],["via_hop","Rye::Hop","Rye/Hop.html#method-i-via_hop","(*hops)","<p><code>hops</code> Rye::Hop objects will be added directly\n\n<p>to the set. Hostnames will be used to create new instances ...\n"],["wc","Rye::Cmd","Rye/Cmd.html#method-i-wc","(*args)","\n<pre>NOTE: See Rye::Box for the implementation of cd</pre>\n<p>def cd(*args) run_command('cd', args) end def rm(*args) ...\n"],["wget","Rye::Cmd","Rye/Cmd.html#method-i-wget","(*args)",""],["which","Rye","Rye.html#method-i-which","(executable)","<p>An all ruby implementation of unix \"which\" command.\n<p><code>executable</code> the name of the executable\n\n<p>Returns ...\n"],["which","Rye::Cmd","Rye/Cmd.html#method-i-which","(*args)",""],["whoami","Rye::Cmd","Rye/Cmd.html#method-i-whoami","(*args)",""],["wildly","Rye::Box","Rye/Box.html#method-i-wildly","(*args, &block)",""],["without_indent","Rye","Rye.html#method-i-without_indent","(str)","<p>Returns <code>str</code> with the leading indentation removed. Stolen from\ngithub.com/mynyml/unindent/ because it ...\n"],["xz","Rye::Cmd","Rye/Cmd.html#method-i-xz","(*args)",""],["LICENSE","","LICENSE_txt.html","","<p>Copyright (c) 2009 Delano Mandelbaum, Solutious Inc\n<p>Permission is hereby granted, free of charge, to any ...\n"],["README","","README_rdoc.html","","<p>Rye - v0.9\n<p>&lt;strong&gt;Safely run SSH commands on a bunch of machines at the same\ntime (from Ruby)&lt;/stong&gt;. ...\n"],["VERSION","","VERSION.html","","<p>0.9.8\n"]]}}