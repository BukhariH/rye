= Rye - v0.2

Run system commands via SSH locally and remotely in a Ruby way. 

Rye is similar to Rush[http://rush.heroku.com] but everything happens over SSH (no HTTP daemon) and it's less powerful by design (for safety). 

See +bin/try+ for a bunch of working examples.

== Installation

One of:

* sudo gem install rye
* sudo gem install delano-rye --source http://gems.github.com/
* $ git clone git://github.com/delano/rye.git


== EXAMPLE 1 -- Basic Usage
    
    rbox = Rye::Box.new('localhost')
    
    # Commands are run as methods on the Rye::Box object
    
    puts rbox.uptime                # => 11:02  up 16:01, 3 users
    
    
    # The response value for all commands is a Rye::Rap object. The rap is a
    # subclass of Array so you can treat it as an Array, but it can also act 
    # like a String if there's only one element. It also keeps a reference to the 
    # object that called the command. In this case, it will keep a reference
    
    puts rbox.ls('rye.test')        # => ls: rye.test: No such file or directory
    puts rbox.touch('rye.test')     # => nil
    puts rbox.rm('rye.test')        # => nil
    
    puts rbox.echo('$HOME')         # => $HOME
    
    puts rbox.pwd                   # => /home/rye
    puts rbox['/usr/bin'].pwd       # => /usr/bin
    puts rbox.pwd                   # => /usr/bin
    puts rbox.cd('/home/rye').pwd   # => /home/rye
    
    puts rbox.commands.join(', ')   # => pwd, touch, echo, wc, ...
    
    rbox.disconnect


== EXAMPLE 2 -- Custom Commands
    
    rbox = Rye::Box.new('localhost')
    rbox.add_keys('/private/key/path')  # Specify additional private keys
    
    begin
      puts rbox.git('--help')  
      
    rescue NoMethodError => ex
      puts ex.message                   # => undefined method `git' for #<Rye::Box ...>
    end
    
    module Rye::Cmd
      def git(*args); cmd("git", args);  end
    end
    
    puts rbox.git('--help')             # => usage: git [--version] ...
    puts rbox.commands.member?('git')   # => true


== EXAMPLE 3 -- Multiple Machines

    rset = Rye::Set.new
    rbox = Rye::Box.new
    
    rset.add_keys('/private/key/path')       # For passwordless logins 
    rset.add_boxes(rbox, 'localhost')        # Add boxes as hostnames or objects
    
    # Calling methods on Rye::Set objects is very similar to calling them on
    # Rye::Box objects. In fact, it's identical:
    
    p rset.uptime        # => [[14:19:02 up 32 days, 19:35 ...], [14:19:02 up 30 days, 01:35]]
    p rset['/etc'].ls    # => [['file1', 'file2', ...], ['life1', 'life2', ...]]
    
    # And like Rye::Box, the response value is a Rye::Rap object containing 
    # the responses from each box. Each response is itself a Rye::Rap object.
    
    unames = rset.uname
    p unames                             # => [["Darwin"], ["Darwin"]]
    puts unames.class                    # => Rye::Rap
    puts unames.set                      # => Rye::Set
    puts unames.set == rset              # => true
    puts unames.size                     # => 2
    puts unames.first                    # => Darwin
    puts unames.first.class              # => Rye::Rap
    puts unames.first.box                # => Rye::Box
    puts unames.first.box == rbox        # => true


== What you can't do

* You can't use file globs. This means you can't do this: <tt>rbox.ls('*.rb')</tt>. 
* Commands arguments cannot contain environment variables. However, environment variables are available to the commands you run. This means you can't do this: <tt>rbox.echo('$HOME')</tt>. 
* Only a subset of commands are available. You can circumvent this by adding your own (see Example 2)

Why? All commands arguments are escaped. Using a Ruby interface to execute shell commands is pretty awesome, particularly to run them on several machines simultaneously. That's a lot of power and it's potentially very dangerous. That's why some stuff isn't available in Rye that you would otherwise expect to be able to do (particularly the file globs). There's probably a way to do it safely but it's not obvious yet.


== Credits

* Delano Mandelbaum (delano@solutious.com)

== Thanks

* Solutious Incorporated (http://solutious.com) for all the orange juice.
* The country of Canada for making Rye Whiskey. 

== Kudos

* http://github.com/adamwiggins/rush
* http://github.com/jamis/capistrano/blob/master/lib/capistrano/shell.rb
* http://www.nofluffjuststuff.com/blog/david_bock/2008/10/ruby_s_closure_cleanup_idiom_and_net_ssh.html
* http://groups.google.com/group/ruby-talk-google/browse_thread/thread/674a6f6de15ceb49?pli=1
* http://paste.lisp.org/display/6912

== Credits

* Delano Mandelbaum (delano@solutious.com)


== License

See: LICENSE.txt